// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/awskms-key.template (10.04kB)
// data/kmseditkeypolicy.txt (624B)
// data/kmsgrantcreate.txt (2.389kB)
// data/kmsgrantslist.txt (547B)
// data/kmsgrantsretire.txt (681B)
// data/kmsinit.txt (1.64kB)
// data/usage.txt (640B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _awskmsKeyTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xd0\x4b\xef\x16\x8e\x2f\xed\xcb\x61\xfd\xa6\x26\x4d\xe1\xf3\x26\x17\xc4\xe9\x06\x87\x43\x70\x60\xa4\xb1\x45\x44\x22\xb5\x24\x95\x9c\xae\xc8\xff\x7e\x18\x52\x92\xf5\x41\xc9\x49\x9a\xed\x6e\x8b\xe6\xa1\xae\xc5\x21\xe7\xeb\x37\x1f\x1c\xf9\xf3\x01\x40\x10\x5e\xaf\xaf\x30\xcb\x53\x66\xf0\x54\xaa\x8c\x99\x5f\x51\x69\x2e\x45\xb0\x80\xe0\xdd\xd1\xdb\xa3\xc3\xa3\x9f\x0f\x8f\x7e\x0e\x66\x44\x7b\x82\x3a\x52\x3c\x37\xd5\xf2\x25\x6a\x59\xa8\x08\x35\x6c\xa4\x82\x42\x23\x3c\x70\x93\xc0\x7b\xae\xa3\x82\x9b\xb9\xdb\x73\x86\x86\xc5\xcc\xb0\x60\x01\xc4\x0f\x20\xb8\x4e\x98\x09\x15\x5e\x25\x78\x29\x53\xd4\xa7\x52\x05\x0b\xf8\xb7\x5d\x03\x08\x3e\x88\x48\x95\xb9\xb9\xe6\x26\x59\x61\x49\x14\xc0\x44\x0c\x27\x38\x78\xfc\xc0\xd3\x14\x2c\x13\xbb\x91\xa5\xa9\x7c\x00\x93\x20\xe4\x8a\x8b\x88\xe7\x2c\xd5\xc0\x05\x98\x44\x6a\x04\x45\xac\xc0\x48\xc8\xd8\x1d\x51\xb0\xc8\xf0\x88\xa5\x56\x6a\xb9\xb1\xdb\x56\x67\x6b\xb8\xc3\xd2\xb2\xb3\x87\x39\xbd\x76\x1c\x34\xe6\x4c\x31\xd2\x9e\xb6\x28\xd4\xb9\x14\x9a\xdf\xf2\x94\x1b\x8e\x7a\x0e\xa7\x52\x01\xfe\x97\x65\x79\x8a\x33\x60\x40\x5a\x03\x17\x5b\xd4\x76\x8b\x46\x75\x8f\x0a\x32\xbe\x4d\x4c\xeb\x50\x29\xd2\x12\x6e\xd1\x71\xc4\x98\x44\x44\x67\x02\x78\x48\x50\x21\xd3\xc0\x20\x57\x32\x42\xad\xb9\xd8\x82\x90\x31\x02\xd7\x6d\xfa\xd8\xd9\x66\xde\x3a\xf5\x5c\x1a\x04\x93\x30\x03\xdc\x10\xf5\x16\x05\x2a\x96\x5a\x56\xc6\xa0\xa2\x6d\xa4\x3a\xe9\xfc\x51\x31\x61\x9c\xae\x91\x14\x46\xc9\x34\x25\x46\x2c\x22\x96\x44\xd8\x12\x36\x47\x67\x00\x0d\x52\x58\xa3\xdd\x61\xa9\x67\x70\x5b\x18\xd0\x32\x43\xc3\x33\xb2\x72\x82\x1a\xc1\x3c\xc8\xca\xea\x4c\x59\xf5\xa0\x94\x05\x08\xc4\x78\x06\xba\x7d\xa8\x49\xc8\xe8\x0a\x81\xd4\xb5\x62\x94\xb2\xb0\xb2\xdc\xa3\xe0\x28\x22\x9c\x07\x96\xf6\xe6\x00\xe0\xd1\x82\xea\x82\x29\x96\xa1\x41\xa5\x77\xb0\x0a\xc9\x20\xcb\xf0\xec\x42\xa6\x3c\xe2\xa8\xaf\xe4\xb1\xd3\x66\x85\x65\x68\x75\x69\x68\x87\x50\x5e\x6e\xe0\xcd\x86\xa5\x1a\xdf\xcc\xac\x5a\xd6\x2b\x79\x75\x92\x33\x24\x49\x88\xf7\x2c\x2d\x98\xa9\xcd\x6e\x50\x65\x5c\xa0\x43\x8d\x33\x17\x51\x39\xc4\xc5\xb8\xe1\x02\x63\x07\x41\x84\x15\x96\x60\x45\x2b\x67\x16\x61\xcb\xf0\x6c\xc7\xc0\x42\x59\x48\x43\x40\x88\x08\x54\x31\x2a\x8c\xe1\x2f\x26\x91\xc5\x36\x81\x37\xce\x45\x6f\x88\x2b\xed\x73\x66\xb5\x9b\x6e\x11\x12\x29\xa4\xc2\xf8\xaf\x73\x20\x2d\x8c\x2a\x6a\x25\x3a\x2c\x22\x26\x6a\xf7\xb6\x5c\xdb\xc2\xbd\x9e\xef\x5c\x72\x55\xe6\x48\x66\x59\x1b\xc5\xc5\x76\xf7\x3c\x74\xa0\xfb\x95\xa5\x05\xea\x56\xd4\x92\x17\x55\x81\x0d\x21\x40\x60\xad\x19\x54\xdf\x6f\xec\xe7\xe3\xac\xf2\x54\x9c\x71\xc1\xb5\x51\xcc\x48\x75\xd1\x04\xeb\x84\x7b\x4e\x8b\x34\x85\xf0\xf2\x5c\x53\xe0\x15\x1a\x55\xcb\x27\xad\x40\xc8\x51\x6d\xa4\xca\x2c\xd8\xd8\x8e\x09\x45\xdf\xa6\x10\x51\x0b\xb8\x5c\x93\xca\x1e\x8d\x8f\x65\x96\xb1\x13\x4c\x79\xc6\x0d\xc6\xbf\x70\x6d\x82\x8e\xec\x9f\x34\xfe\x6e\x22\xc7\xac\x3c\x34\xf2\x30\x66\x25\xb4\x02\xcd\xe6\xd4\x2f\x90\x78\x85\x65\x57\xb4\xcf\xfb\xbc\xdc\xd3\xe4\x2a\x21\x30\x37\x8f\x40\x5b\x72\x12\x9e\x19\xc3\xa2\xa4\xc6\x51\xa4\xd0\x86\x86\x15\xb3\x23\xc2\xb1\x5d\x59\x73\xca\x8c\x36\xe7\x3f\x45\x8a\x17\x63\x6d\x4c\x8f\x35\x1a\x12\xd5\x45\x08\x70\x97\xf4\x9f\x5e\x6e\x74\x22\x8b\x34\xb6\x11\xea\x14\x9d\xc3\x15\x79\x45\xe1\x6f\x05\x57\xa8\xe1\x38\xbc\x08\xdf\x87\xcb\x5f\x96\x57\xff\xfa\xcf\x32\x3c\x9b\xb7\x0d\xba\x61\x45\x6a\x48\x08\x2b\xba\x33\x4e\x93\xcd\x8e\xa5\x88\xb9\x75\xf6\x2e\x9b\x7d\xd2\x78\xcc\x72\x66\x8b\x4b\xb9\x64\x59\x43\xd3\x36\xdd\xa9\x58\x2c\x3e\xfc\x56\x38\x20\xee\xec\xf3\xb9\xf9\x1f\x50\x91\xde\x58\x94\x0c\x5c\xd0\x10\x3d\xce\x7a\x96\xf5\x06\xed\x07\xc1\x6e\x53\x5c\xb2\xac\xce\xaf\x5f\x2a\xd1\x13\xf2\xf5\x53\x45\x6c\x2c\xd9\x74\x24\x3b\x43\x56\xdd\xc8\x0a\x4b\x1f\xe8\xc2\xeb\xf5\x62\xb1\x3a\xa3\x7f\xb0\xdc\x39\xec\x42\x51\x00\x52\x55\x6f\x6d\x1a\x20\xca\xa7\x55\x2f\xda\xbc\x1a\x38\x53\x5a\x5c\x19\x56\xa3\xb3\x8f\xe9\x15\x96\xae\x5c\xf4\x19\x2d\x63\x22\xaf\xd5\xca\xf4\x8e\x70\xd6\x26\xeb\xb6\x71\xef\x0e\xdf\x1e\x1d\xbe\xfd\x7b\x97\x64\x6d\x98\xc1\x0c\x85\xe9\xf8\xaa\xef\xaf\xc6\xaf\xcb\xcd\x80\x6e\x1f\x32\x66\x03\xea\xfe\xc9\x4e\x10\x6e\x75\x72\x07\x75\xcb\x96\x91\xb0\xa5\xe2\xd7\xaa\x59\xae\xe5\x68\xba\x34\x50\x52\xda\x65\x59\x10\x19\xa5\x7e\x97\xe9\xe7\x1e\xf6\x24\xee\x66\x83\x91\x69\x10\xe8\x27\x6a\x52\x7c\xcf\xfa\x2d\x92\xf0\x7a\xed\xb5\xc7\xb8\x9e\x2d\x5b\xfe\x43\x72\x31\xb1\xdb\xd2\x2d\xbc\xa2\xd5\x7f\x53\x5b\xa9\x1b\x56\x62\xc1\x1e\xf4\x82\xb3\x6c\xfa\x9c\x29\x51\xab\xb3\xea\x80\xa5\x58\x09\x9d\x9d\x97\x71\x30\xb9\xeb\x71\x9a\x65\x40\x3e\x9b\x3a\xe1\x66\x74\x6d\x6c\xe5\xd1\xfb\xdc\x47\xed\x95\x2d\x08\xa3\x3a\x12\xef\x32\xbd\xf8\xc9\x0f\x8b\x3a\xbf\x10\xd9\x4f\x43\xf9\x3d\x27\x4f\xe1\x3d\x1c\xc2\xd7\x48\x50\x98\xa7\x2c\x72\x4d\xa5\x0d\x83\xf2\x07\x90\x7f\x00\xf9\x05\x40\xf6\x1b\xd6\xc2\xfb\x23\x1a\x7f\xd9\xe8\xd1\x51\x37\x59\x13\x52\x31\x9c\x20\xbd\x28\x5a\x47\x7a\xc8\x6e\x5e\x14\x50\xbd\x27\x5d\x2b\xf4\xf4\x1f\x14\xad\x4e\x98\x55\xf5\x83\xae\x97\x74\x15\xeb\xdc\x41\x86\x8a\xed\x0d\xae\x3d\x81\x55\x05\x95\x37\xfa\x6b\x14\x8e\xdc\x82\xf6\x1a\x61\xe0\xf6\x29\x97\x5b\xdf\xb8\xe6\xcf\x97\xd3\xec\xb2\x6b\x58\x6e\xc7\x09\x5c\x61\x1e\x5d\x26\x94\x8c\x2e\x5e\x14\xe3\x6b\x9f\xf2\x78\x4a\xae\x4b\xbc\x97\x77\x13\x62\x73\x3d\x29\xd6\x47\x1c\xe7\x7c\x82\x29\x4e\x70\x5e\x47\x09\xc6\x85\xed\xd1\x2c\xa5\xbf\x97\x71\xb6\x65\x22\xc2\xb4\x4d\xd8\xc7\xec\xc0\x5d\x13\xa0\x7f\x16\xa4\x5b\xb3\xab\x3b\x1c\xc6\xf1\x57\xc0\x70\xef\x36\xfc\x3b\x40\xb7\xba\x9f\x8d\xfb\x71\x72\xf9\x12\xab\xfd\x13\x20\x11\x74\xd3\xc6\x13\x66\xd8\x0a\xcb\xbd\x31\x42\xd7\x84\xaf\xe6\x60\x77\xbf\xa6\x0e\x9d\xfc\x9c\x53\x47\xaf\x0d\x7d\x53\xcd\x3d\xe7\xbb\x74\xba\xcb\x57\x76\xe8\x35\x95\x73\xdc\x54\x6c\x3a\x7b\xb8\x43\x9e\xe9\xb1\xc1\xb2\xef\xae\xdb\x5a\x7e\x2f\xe5\x58\x7f\xe5\x40\x46\x42\x2c\xf5\xa9\x54\xe1\xf5\xba\xc5\x8a\xee\x7c\xfb\xcd\xf7\x2c\xfc\x4c\x5d\xd4\xc6\x67\x0a\x2f\xe9\x5b\xab\xa9\x33\x17\x5b\x02\x27\x13\x25\xdc\xb3\xb4\xc0\x7a\x7a\x8d\x31\x14\x22\x46\xe5\x19\x5d\x75\xce\xfc\x53\x74\xb1\x1f\xd1\x84\x66\x78\x0d\xee\x51\x0e\x87\x42\x93\x0d\x69\x10\xaa\x41\x31\xd8\xfd\xfd\x91\xed\x5f\x9d\x35\x5f\xad\x4d\x7b\x22\x7e\xda\xfd\xf7\xb9\xb4\x93\xbd\xd7\xee\xf9\xbe\x1e\xfe\x2b\x9c\x13\xfe\xbf\x37\xa0\x0f\x87\xa2\xdf\x28\xd0\xc7\xbb\x07\x18\x69\x00\xbe\xc9\x98\x38\xf0\xad\xd4\x4f\xdd\x67\x3d\xc6\xf5\xe4\xb0\xb1\xb1\xe8\x32\x3c\x5b\x2c\x3a\xce\xef\xd4\xc1\x27\x84\xd3\xf0\xe5\x6f\x75\x4a\x56\x4d\x1d\x3d\xe2\x50\x9b\x93\x71\xa3\x9b\xfa\xe2\xde\xb6\xda\xda\xa2\xfd\xc5\xa5\x7e\x71\xfb\xc0\x4d\x22\x0b\x63\x6b\x91\x42\x6d\x14\xaf\x07\x81\x07\x3d\x9f\x8c\x0e\x78\x43\xad\x8b\xcc\x0e\xc8\xdd\x4d\xf6\x44\x46\x45\x25\x6b\x67\x08\xfb\xba\xd3\xd5\x2f\xed\xd9\xd6\xa8\xee\xb9\x45\xa2\x2f\x16\x02\x8c\xde\xcd\x59\xc6\xfe\x27\x05\x7b\xd0\xf3\x48\x66\x43\x80\xf5\xc3\xee\x79\x3d\x9b\x36\x7a\xb1\xb3\xdc\xa0\xdb\x7a\x31\x58\x3d\x79\xe8\x8f\x04\xab\xe7\x5d\x51\x0d\xd6\xba\x18\x74\xc0\xfa\x03\xa2\x2d\x56\xdf\x1b\x44\x9b\x77\x4e\xff\x2c\x4c\x5e\x98\xd6\x1b\xa7\x15\x96\xcb\x93\x89\x37\xc3\x2b\x2c\x61\x79\xb2\xc3\x9d\xcb\xf9\x1d\x1f\x57\x45\xa1\xf5\xee\xca\x1b\x1f\x2b\x2c\xa9\xf4\x4e\xb3\x0a\x2f\xcf\x27\x79\x8d\x4c\x71\x83\x8e\x8b\xbb\x16\x6d\x86\xb2\x54\x40\x83\x3d\x1d\x59\xbb\xc0\x5d\xe2\x76\x30\x21\xe9\xf9\x71\x30\x2d\x9e\x3c\x70\x64\x8a\x3b\x38\xf3\x0e\xcb\xbf\x3d\xf1\xdc\xa1\xd1\xab\x33\xbd\xa8\xb8\x79\x41\xe2\xea\x39\xe9\x9c\x65\xcd\x1c\x47\x51\x52\x71\xbf\x13\x70\xbf\x40\xea\x26\x16\x26\x4a\x93\x4c\x75\x9c\xcf\x4e\x7a\xe3\xe0\xf3\xe8\xf0\x82\x8e\x62\x44\xd7\x81\x9e\xdd\x6a\xdf\xe8\xb9\xff\x32\xf9\x8a\x1a\x7b\x34\x19\xc6\xfc\xc1\xe3\xc1\xff\x03\x00\x00\xff\xff\xf2\xcb\xef\xa1\x38\x27\x00\x00")

func awskmsKeyTemplateBytes() ([]byte, error) {
	return bindataRead(
		_awskmsKeyTemplate,
		"awskms-key.template",
	)
}

func awskmsKeyTemplate() (*asset, error) {
	bytes, err := awskmsKeyTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "awskms-key.template", size: 10040, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x4b, 0x56, 0x1e, 0x8c, 0x78, 0xc8, 0x15, 0x76, 0xc7, 0x51, 0x52, 0xab, 0xfb, 0xe3, 0x79, 0xd2, 0x66, 0x3, 0xb6, 0x50, 0xc4, 0xf, 0x8d, 0xcf, 0x7b, 0xca, 0x9b, 0x11, 0x7c, 0x18, 0xaa}}
	return a, nil
}

var _kmseditkeypolicyTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x49\xce\xdb\x30\x0c\x85\xf7\x3a\xc5\x3b\xc0\xef\x5c\xa2\xe8\xa2\xfd\xd1\x01\xc8\x09\x18\xf9\x29\x26\xa2\x88\x86\x28\xc7\xf0\xed\x0b\xcb\x46\x27\x14\x5d\x0a\x7a\xc3\x47\xf2\xe3\xa8\x0d\x6d\x22\xde\xbf\x5c\xf1\xce\x0d\xdf\x2d\x6b\xdc\x90\xac\x42\x90\xe5\xc6\x0c\x89\xd5\xdc\x51\x79\x57\x2b\x7e\x09\x81\xa3\xb6\xe1\xc1\x6d\x98\x0f\xb1\xcd\x2c\x8e\x65\xc6\x66\x4b\x45\x92\x97\x55\x6d\xc4\x2e\xb3\x8a\x55\xdb\xd4\x2b\x3e\x5f\xbf\x7d\x45\xe5\x5c\xe9\x2c\x4d\x9a\x5a\x09\x96\xfe\xd5\xde\x26\x69\x50\x47\x5c\x6a\x65\x69\x79\x83\xb3\xc1\xca\x4f\xed\x83\x9b\x43\xdc\x2d\xaa\x34\x8e\xbd\x23\x08\x7c\x66\xd4\xa4\xf1\x00\xbf\xe0\xc3\x24\xe5\x4e\xdf\xb9\xf0\x94\x07\xd1\x0c\x6d\x52\x47\xd2\x4c\x48\x25\xd6\xaa\xad\xb1\xe0\x26\xf1\x71\xfc\xb2\x87\x07\x2d\x90\x9c\x71\xf2\xc9\x3c\x67\x8d\x72\xcb\xfc\xcf\x1a\x56\xcd\x19\x2f\x56\x4d\xe7\x04\xbb\xb3\xff\x29\x1d\x7f\x06\x9e\x29\x3b\x43\xd8\xdf\x2e\x4f\xe2\xc6\x64\x95\xbb\xcc\x56\x2d\xf7\x8e\xdd\xac\xef\xf1\x57\xd6\x76\xc1\xa7\x9e\xb1\x61\xd4\x94\x58\xdf\xba\x6e\x2f\x0f\x85\x1c\x77\x47\xa5\x5b\x7e\xb1\x9b\x0e\x11\x4b\xa4\xe3\x29\x65\x91\x9c\x8f\x88\xc3\xe5\xd3\x6e\xb0\x17\xeb\xda\x8f\x76\x30\x86\xdf\x19\xfb\x01\xe5\x6c\x47\xaa\xf6\x84\x15\xfe\x35\xc9\xdb\xb9\xe4\x0d\x8b\xf7\xe2\x30\x0c\xc9\x6a\xe4\x70\x08\x90\xb2\xdc\x2f\xe1\x47\x00\x00\x00\xff\xff\x9c\xac\x9a\xce\x70\x02\x00\x00")

func kmseditkeypolicyTxtBytes() ([]byte, error) {
	return bindataRead(
		_kmseditkeypolicyTxt,
		"kmseditkeypolicy.txt",
	)
}

func kmseditkeypolicyTxt() (*asset, error) {
	bytes, err := kmseditkeypolicyTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kmseditkeypolicy.txt", size: 624, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0xed, 0xf0, 0x62, 0xc5, 0x4b, 0x98, 0x41, 0x3d, 0xb0, 0x75, 0x3, 0x53, 0x4a, 0x92, 0x16, 0x12, 0xfb, 0xd2, 0x47, 0x52, 0xd5, 0x4e, 0xcd, 0x7, 0x50, 0x40, 0xe4, 0x40, 0x15, 0x7d, 0x43}}
	return a, nil
}

var _kmsgrantcreateTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x5b\xaf\xdb\x46\x0f\x7c\xce\xfe\x0a\xc2\xdf\x07\x24\x01\x6c\xf9\x24\x45\x5f\xf2\x96\xa4\x17\x14\x6d\x5a\x20\x39\x45\x51\xa0\x40\x41\x6b\x29\x8b\x38\x7b\x51\x96\xbb\x76\xd5\x5f\x5f\x70\x75\x73\x4e\x9a\x3e\x5a\x5a\x0d\x87\xc3\xe1\xac\xdf\x26\xc2\x4c\x80\xf0\xe3\xbb\x0f\xf0\x7d\xc2\x90\x01\x9d\x8b\x57\x0e\x67\x90\x81\x5a\xee\xb8\x85\x38\x50\xc2\xcc\x31\x08\xc4\x00\xb8\xbd\x10\x6a\x13\xe5\xc6\x98\xfa\xa5\x00\x05\x3c\x39\x82\x31\x16\xc8\x11\x2c\x39\x3a\x2b\x7a\xee\x09\x8a\x10\xc4\x6e\x2e\xf4\x40\x23\x74\x31\xdd\x42\x0d\x25\x0d\x51\xc8\x1c\x0e\x50\xa4\xa0\x73\x23\x7c\x43\x6d\x1a\x87\x0c\x87\x03\x9c\xf9\x42\x01\x5a\x4a\x19\x39\x40\x1b\x83\xe4\x84\x1c\xb2\x34\x30\x97\xc6\x44\xe0\xa3\x64\x68\xa3\xf7\x31\xb8\xd1\x14\x21\xab\x34\x6a\x3f\xeb\xb7\x43\xe2\xd0\xf2\x80\x4e\x26\x8a\x53\x89\xa9\x11\x6d\xa0\xfe\x26\x0b\x25\x58\x4a\x80\x66\x25\xf8\x40\x63\x03\xf7\x3d\x6d\x08\xd0\x62\x80\x13\x01\x06\xf8\xe1\xf5\x3b\xf8\x55\x28\xed\x01\x45\x8a\x27\x0b\x29\x3a\xda\x83\xf6\x38\xbd\x7d\x1f\x1d\x35\xc6\xbc\x16\x7d\x40\x7f\xa1\x1f\xf4\xbd\x76\xc2\xb5\x50\x80\x6f\xdf\xbe\x04\x0e\x92\x31\xb4\x04\xa9\x84\xa0\x33\x40\xb8\xd2\x49\x28\x5d\x28\x01\x87\x19\xcc\x28\x18\xe4\x1e\x33\x60\xc9\x3d\x85\xcc\x2d\x66\x12\xe0\x2c\xe4\xba\xda\x34\x58\xcc\x78\x42\x21\xb8\x72\xee\x01\x61\x40\x91\x6b\x4c\xb6\x36\x61\x36\xd4\x40\x64\xa5\x8e\x68\xfd\x62\x39\x0a\xcf\xf4\xf1\xa4\xcd\xf3\x3d\x5c\x7b\x6e\x7b\x60\x01\xc9\x31\x91\xad\x7c\xa0\x19\xd1\x3b\xd3\xb1\x23\x68\xab\x97\x2c\x9c\x46\xd8\xbe\x53\x99\xa3\x6b\x60\xf7\xe0\x05\xce\xd5\x60\xd3\xb9\x9d\x22\x7d\x3a\x23\xed\x68\x13\x3c\xd5\x26\xb7\x19\x7d\xe6\xbb\x7d\x65\xe0\x9c\xfa\x4a\x0b\x26\x3a\x57\x8f\x56\x61\x72\x4f\x66\x3a\xa6\x75\x1e\xcd\x55\x35\xd0\xa7\xd3\x18\xaa\x65\x30\x58\xb8\xb2\x73\x33\xbb\x89\xaa\x54\x97\x2a\xd4\x6e\x11\xe7\xcf\x45\x9c\x1d\x2c\xf0\x5f\x26\xc1\xb5\x78\x5b\x52\xa2\x90\xdd\xb8\xd1\x30\x1c\x5e\x19\xf3\xe4\xff\x70\x62\x69\x0b\x67\x58\xd5\x91\x85\xc0\xe1\x50\x7f\x13\x1d\x36\xc3\xa9\x24\xc7\x75\x74\x02\x7f\x98\x27\x4f\x0e\x1d\x48\x46\xe9\x9b\xd1\x3b\xf8\x8c\xa5\x31\xbf\xa8\x9d\xe6\xd1\xec\x01\xc3\xf8\xef\x46\xe3\x50\xe9\xdf\x80\x57\xfd\xd5\xe2\x21\x5e\xf5\x98\xd1\xf7\xbb\x85\xf0\x99\x32\xfc\x77\xe9\xdd\x96\x0b\x8b\x33\x6a\x11\x16\xf0\x18\x02\x25\xe8\xf1\xa2\xd1\x53\x02\x7f\x2c\x04\x01\x3d\xc1\x99\x82\x66\x0d\xd9\x45\x79\x3f\xcf\x8a\x65\x5b\xe8\x4b\x64\x0b\x89\x6c\x09\x56\xfd\x34\xe9\xa6\xbd\x59\x40\x27\x11\x24\x4e\xf2\x6b\x0e\x69\x03\x89\x2e\xf1\x61\x8a\xa1\x7a\xd6\x14\xd1\x96\x9f\xde\x88\x9e\x28\x73\xa2\xa7\x8d\x31\xf7\xfd\x3a\x7c\xcd\x94\x44\x92\x13\xb7\x79\x2a\xad\x10\x95\xe7\x3c\xed\xd9\x02\xb3\x31\xc9\x6a\x3e\xea\xf3\xd9\x51\xc6\x71\xa0\x06\xde\xd3\xc7\x42\x92\x3f\x49\x1c\x1d\x44\xcc\x3d\xa5\x05\xe3\x71\xf4\x54\x78\x2d\xa5\x61\xa9\xce\x34\x1d\xb2\x53\x35\x8a\x00\x77\xb5\xb9\x2a\xe0\x8b\xbb\x75\xd5\xe6\x21\xea\x36\xee\xab\x29\xbf\x04\x6a\xe6\x14\x9e\x55\x53\xac\x6b\xcd\xfe\x75\xeb\x34\xd7\x4e\x8f\x16\x70\x75\xb9\xdf\xd7\x4f\x7c\x91\x65\x9b\xcd\x8b\xbb\x45\xb5\x81\xd2\x14\x96\x3f\xc7\x3c\xa7\xd4\xeb\xdf\x3e\xc0\xe0\xb0\xa5\xfa\xf6\xa0\x1d\x39\xf6\x9c\x65\xd1\xeb\x7f\x15\x38\x66\x74\x33\x8a\x79\xb6\x6d\xcd\xcb\xaf\xef\x9e\x57\x9a\x37\x05\xb6\x9d\xb8\x39\xf8\xd5\xdd\xf3\x25\xa2\xb1\xd5\x4c\x74\x86\xfd\xe0\x34\x1c\x39\x86\x89\x7b\xb5\xd2\x66\x0f\xe9\x63\x71\x56\xbb\xf5\x1c\x6c\x57\x9c\x36\x9c\xc8\xc7\xcb\xea\x82\x29\x67\x13\x99\x10\xc1\xc5\x70\x9e\x92\xb8\x08\xed\x61\x28\x15\x25\xd5\x06\x13\x49\x2c\x49\x7b\xe4\x90\xe3\x1a\xfa\xb3\xc4\x2c\x52\x36\xc8\x68\x72\x1f\x85\xea\x21\x55\x5c\x1a\xf8\x2e\x26\xf0\x31\x91\xe1\xd0\xc5\xe4\x2b\xe5\x3d\x08\x11\xf4\x39\x0f\xaf\x8e\x47\x1b\x5b\x69\xf0\x2a\x0d\x7a\xfc\x3b\x86\xa6\x8d\xfe\xf8\xe0\xe5\xe8\x34\xfa\xf3\xd1\xd2\x85\x9c\xde\xd4\xe7\xc2\x96\x8e\x93\xbe\x4d\x9f\xbd\x33\xe6\xcd\x08\x96\x3a\x2c\x2e\xef\xb7\x2d\x90\xdb\xc0\x7e\x33\xaf\x75\xdd\x9f\x25\x8d\xe7\x83\x44\x93\x28\xba\x44\x66\x7d\xba\xee\xa5\x4a\xa1\xc2\x71\x00\x69\x29\x60\xe2\x28\x70\xed\x29\xd1\xad\xaf\x3c\xb6\x3d\x87\x8a\x54\xb3\xc7\x39\xbd\x5c\x97\x04\xad\x37\x96\x50\x5b\x12\x4d\x46\x81\x67\x52\xda\x1e\xb0\x5e\x97\x1c\x0e\x9e\x7c\x4c\x23\xdc\xff\xf4\xa1\xde\xe4\x7a\x0b\x60\xa6\xc9\x16\x7a\x03\x1a\xcb\xb2\xd1\xae\x26\xee\x52\xf4\x20\xe5\x24\xba\x7d\xd5\x1f\xb3\x91\x75\xf7\xeb\x50\xe7\xf2\x78\x46\x0e\x0d\xfc\x3e\xa5\x85\x49\xd4\x55\xa2\x3d\x81\x63\xc9\x6a\x9b\x9b\x3f\x40\xcb\x9f\x1a\x0b\x53\x88\x2c\x77\x87\x6e\x3a\x74\x0e\xcf\xd2\x98\x7f\x02\x00\x00\xff\xff\x33\x3a\xea\x7e\x55\x09\x00\x00")

func kmsgrantcreateTxtBytes() ([]byte, error) {
	return bindataRead(
		_kmsgrantcreateTxt,
		"kmsgrantcreate.txt",
	)
}

func kmsgrantcreateTxt() (*asset, error) {
	bytes, err := kmsgrantcreateTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kmsgrantcreate.txt", size: 2389, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xf0, 0x29, 0x50, 0x53, 0xa2, 0x54, 0xda, 0xf7, 0x7c, 0x8f, 0xe5, 0x71, 0x1a, 0xf3, 0x5b, 0x20, 0x3d, 0x1, 0xa0, 0xa2, 0x87, 0xd0, 0x53, 0x14, 0xfe, 0xe8, 0x5a, 0x44, 0xb4, 0x31, 0xdd}}
	return a, nil
}

var _kmsgrantslistTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xbd\x8e\x13\x31\x14\x46\xeb\xcc\x53\xdc\x02\x69\x1b\xb2\xeb\x7f\x8f\x5d\x83\x68\xa8\x68\x11\x42\xd7\xd7\xd7\x60\x31\x33\x19\xd9\x8e\x42\xde\x1e\x85\x44\xab\xd5\xb6\x47\xdf\x77\xce\xd7\xda\x07\xfc\x6a\xb8\x8d\x0e\xd4\x18\x07\x67\x48\x57\x78\xfa\xb3\xf6\x3b\x7e\xd0\x27\x28\xa7\x06\x08\x7d\x67\xaa\xa5\x12\x74\xa6\xc6\xe3\x79\x9a\x3e\xff\xc5\x75\x5f\x38\x4e\xd3\xe1\x03\xa4\xda\xe9\x5c\x07\xbc\xde\x3b\x2c\xb7\xc2\xb1\x40\x1f\xd8\x7f\x3f\x5f\x71\x5d\x20\xe3\xc0\x84\x9d\x7f\xee\xd8\xfb\xe5\xd4\xf2\x74\xc0\xa5\x62\x7f\x79\xdc\x8f\x99\x0b\x9e\x97\x11\xa7\x03\xc0\x2b\xb3\x4a\xcf\x46\x16\xa6\xff\x18\xee\x7e\xe6\xbd\xd5\x8d\xea\x8e\x4b\x04\x6c\x5b\xc4\x4b\x8f\x15\xd7\x18\xa5\xd2\xc6\x3a\x3f\x07\x21\x55\x3c\x77\x6e\x2f\x6b\xdd\xea\x8a\xf7\xf3\x69\xe7\x86\xa3\x9e\xb6\x1e\xe1\xfb\x27\xa6\x76\xdd\xc7\x47\xf8\xc6\xa3\x36\xfe\x72\x13\xff\x78\x13\xa9\xb9\x3f\x9a\x00\xe7\x7e\x64\xec\xe3\x28\x23\x90\xf7\x3e\xa3\x25\xef\x45\x4e\x56\xa8\x80\x64\x84\xd1\x26\xcc\xca\x0b\xe9\xa5\x0b\x4c\x6e\xf6\x9e\x84\x41\x4f\x72\xd6\xbe\x90\xf3\xa8\x35\x59\xe5\x5c\xa0\x37\xca\x0b\xdf\x95\x86\x51\x48\xd2\x06\x03\x1b\x9d\x48\x8b\x40\xa2\x90\x97\x02\x6d\x66\x63\x35\x3a\x47\xd2\xf9\x34\x8b\xcc\xe5\xb6\x29\x4e\x7a\x8d\x69\xb6\x2c\x24\x3b\x7c\xaf\x54\x11\x64\x91\xd2\x48\x83\xac\x0d\xdb\x39\x3b\x21\xc9\x19\x65\xad\x4e\xce\x4b\x63\x03\xe9\x40\x2e\xa5\x64\x55\x50\x46\x49\x69\x8a\x15\x9c\x83\x53\xd9\xcc\x1a\xb5\x9f\xfe\x05\x00\x00\xff\xff\x68\xe3\x96\x4d\x23\x02\x00\x00")

func kmsgrantslistTxtBytes() ([]byte, error) {
	return bindataRead(
		_kmsgrantslistTxt,
		"kmsgrantslist.txt",
	)
}

func kmsgrantslistTxt() (*asset, error) {
	bytes, err := kmsgrantslistTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kmsgrantslist.txt", size: 547, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x55, 0x53, 0xde, 0x59, 0x88, 0x82, 0x5, 0x64, 0xb8, 0xa3, 0xc4, 0xb8, 0x59, 0xee, 0x92, 0xda, 0xf3, 0x73, 0x24, 0xf0, 0xcc, 0x33, 0x38, 0xbe, 0x67, 0x93, 0xf8, 0x3f, 0xb0, 0x1a, 0x8e}}
	return a, nil
}

var _kmsgrantsretireTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x8b\x14\x31\x10\xc5\xcf\xd3\x9f\xa2\x58\x85\xb9\xd8\xbb\xf9\x9f\xee\x3e\x2b\x1e\xc4\x8b\x1e\x45\xa4\x52\xa9\xec\x06\xbb\x7b\x9a\x24\xc3\x38\xdf\x5e\x76\x66\x59\x86\x05\xf1\x58\x2f\x79\xbf\x82\xf7\xea\x1b\xb7\x5c\xb8\x02\xc2\x97\xaf\xdf\xe1\x73\xc1\xb5\x01\x15\xc6\xc6\x11\xc2\x19\xf6\xbf\x97\x0a\x8f\x37\xea\xfe\xbe\xeb\x3e\xfd\xc1\x65\x9b\x79\xea\xba\xdd\x3b\x78\xe4\x06\xed\x89\xe1\x6e\xc5\x85\xef\xe0\x90\x2e\xd3\xd5\x92\xca\x61\xb9\x41\x54\x98\x73\x6d\xfb\x6e\xf7\x1e\x42\xae\x74\xcc\x0d\xde\xbc\x41\x9f\xa0\x36\xac\x4f\xf7\x67\x5c\x66\x88\xd8\x30\x60\xe5\x5f\x1b\xd6\x7a\x3a\x94\xd8\xed\x70\xce\x58\x1f\x5e\xec\x7d\xe4\x84\xc7\xb9\x4d\xdd\x0e\xe0\x55\xb3\x4a\x0f\x46\x26\xa6\x8b\x0c\x57\x3e\xf3\x56\xf2\x4a\x79\xc3\x79\x02\x2c\xeb\x84\xa7\x3a\x65\x5c\xa6\x49\x2a\x6d\xac\xf3\xc3\x28\xa4\x9a\x8e\x95\xcb\xc3\x92\xd7\xbc\xe0\xd5\x7c\xd8\xb8\x60\xcb\x87\xb5\x4e\xf0\xe3\x23\x53\x39\x6f\xed\x03\x5c\x53\xbb\xa4\xf5\xf3\x66\x49\x8e\xf5\x65\x27\xc0\xb1\xf6\x8c\xb5\xf5\x72\x02\xf2\xde\x47\xb4\xe4\xbd\x88\xc1\x0a\x35\x22\x19\x61\xb4\x19\x07\xe5\x85\xf4\xd2\x8d\x4c\x6e\xf0\x9e\x84\x41\x4f\x72\xd0\x3e\x91\xf3\xa8\x35\x59\xe5\xdc\x48\x37\xc8\x13\x5f\x91\x86\x51\x48\xd2\x06\x47\x36\x3a\x90\x16\x23\x89\x44\x5e\x0a\xb4\x91\x8d\xd5\xe8\x1c\x49\xe7\xc3\x20\x22\xa7\xe7\x3f\xc9\x49\xaf\x31\x0c\x96\x85\x64\x87\x6f\x91\x6a\x02\x99\xa4\x34\xd2\x20\x6b\xc3\x76\x88\x4e\x48\x72\x46\x59\xab\x83\xf3\xd2\xd8\x91\xf4\x48\x2e\x84\x60\xd5\xa8\x8c\x92\xd2\x24\x2b\x38\x8e\x4e\x45\x33\x68\xd4\xfe\x1f\xb5\x96\x4b\x54\xd0\xf7\x97\xb9\x7f\xbe\x92\xd7\xaa\x48\x47\x3f\x24\x1d\x84\xfc\x6f\xf1\xdd\xdf\x00\x00\x00\xff\xff\x36\xea\x84\xfe\xa9\x02\x00\x00")

func kmsgrantsretireTxtBytes() ([]byte, error) {
	return bindataRead(
		_kmsgrantsretireTxt,
		"kmsgrantsretire.txt",
	)
}

func kmsgrantsretireTxt() (*asset, error) {
	bytes, err := kmsgrantsretireTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kmsgrantsretire.txt", size: 681, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0x8d, 0xb6, 0x80, 0x65, 0x3f, 0xf9, 0x85, 0x49, 0x71, 0x52, 0x65, 0xd2, 0x21, 0x75, 0xe1, 0xcc, 0xf4, 0xe9, 0x3c, 0x57, 0xd2, 0x22, 0x79, 0x83, 0x12, 0x27, 0x46, 0xa8, 0xef, 0x3b, 0x1f}}
	return a, nil
}

var _kmsinitTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xc1\x6e\x2b\x37\x0c\xbc\xeb\x2b\x08\x9f\x5a\x20\x76\xbf\xe1\xbd\x02\x05\x82\x20\xa7\x14\x28\x7a\xa4\xb5\x5c\x2f\x11\xad\xb8\x10\xa9\xb8\xdb\xa2\xff\x5e\x50\xda\xb5\x9d\xf4\xdd\xec\x95\x34\x1c\xce\x0c\xf9\x9c\xd9\x18\x13\xff\x4d\x0a\x52\xa0\x2e\x03\x1a\x29\x20\x8c\x9c\x08\xae\x6c\x13\xbc\xd3\x0a\x51\xf2\xc8\x97\x5a\xd0\x58\x32\x8c\x7e\x53\xb7\xe3\x6f\x7f\xbc\xc1\xcb\xeb\xdb\x29\x84\xef\xac\xb1\xb2\x41\x26\x1a\x1c\xe2\xe5\xf5\xad\x3d\xe6\x0c\x84\x71\x82\x42\x17\x7f\x6d\x13\x1a\xac\x52\xe1\xca\x3a\x81\x09\xc8\x42\x05\x8d\x80\xf3\x09\x5e\x68\xd5\x80\x85\x80\x07\xca\xc6\x23\xd3\x00\x18\x8b\xa8\x6e\xcf\x15\x3e\x18\x01\x13\xa3\x92\x3a\xb4\x4d\xe4\x84\xe6\x70\x68\x1f\x7f\x39\x77\x16\xc7\x7f\x12\x9e\x29\xfd\x7b\x38\x85\xf0\x3c\x3a\x0f\xed\x7c\x6d\x12\xa5\x1b\x00\xfd\xc5\x6a\x4f\x0e\xb2\xc2\x95\x53\x82\x33\x79\x6b\x03\x60\x1e\x3a\xb4\xeb\xa0\x0b\xc5\xc6\x25\x6c\x10\x04\xc7\xa3\x9f\x64\x9c\x09\xc6\x84\x97\xfb\xe3\xa6\xe0\xe0\x7d\x15\x1a\xa9\xf8\x0f\x9b\x68\xee\x34\xfc\x65\xa3\x32\x08\x64\xb1\x4f\xe5\x7f\xf2\x92\x2a\x33\x01\xaa\x4a\xe4\x06\xb3\x48\xe2\xc8\xa4\x3f\xef\x05\x42\x2c\xd4\x4e\xce\x2b\x54\xe5\x7c\x01\x84\x73\xe5\x64\x47\xce\xf0\x6b\x92\x3a\xfc\x26\x65\xee\x3e\xa9\x61\x7c\xff\x52\xb8\x55\x74\xdd\x5a\xa5\x5d\xd3\x73\xb5\xc6\x47\x6c\xa2\xa2\x4f\xcd\x9e\x88\x19\x26\xfc\xa0\xf6\x76\x66\xf5\x62\xa1\x61\xec\x14\x9a\x18\xc7\x63\xff\x7b\xdc\xae\x1c\xfd\xca\x29\x84\xdf\xf7\x8a\x0d\xa3\x99\xa1\xdd\x7b\xb7\xb7\x69\x6c\xb2\xdb\xbc\x36\x8d\xbe\x38\x7d\x6a\x18\x03\x8d\x58\x93\x75\x04\x60\x85\xc3\xf6\xe5\x70\x82\x3f\x37\x9a\xdd\x9f\xd5\x69\x17\x90\x6b\xde\xcb\xf1\x78\x0b\x5a\x30\x69\x99\x9d\x6b\x32\x5e\xd2\x8d\x91\xf7\xc0\x19\x10\x9c\x7b\x22\xc0\x18\xa5\x66\xdb\x1a\x28\xa4\x52\x4b\xa4\x7b\xcf\xe7\x15\x0e\xef\xb3\x27\x8f\xed\xd0\x5a\x59\x8a\x7c\xb0\xb2\xe4\x5d\x91\xaa\x34\xd6\xb4\x13\x0f\x4a\x66\x9c\x2f\x7a\x02\x47\xfc\x91\x45\x2d\x00\x37\xab\x01\xcd\x30\x4e\x5d\x9f\xdd\xb7\x27\x0f\x64\x68\xfd\x3d\x7f\x7b\xbd\xdf\xf5\xee\x1f\x52\x87\xda\x35\xe8\x23\x18\x27\xcc\x97\x3e\xa6\x52\x0d\x0a\x1d\x4b\xcd\xd9\x6d\xbc\xb7\x70\x82\xef\xeb\x4e\xb5\xf3\xd8\xc7\xb6\x05\xae\x99\x87\xbd\xde\xfa\x89\x19\x5b\x73\x33\x60\x4a\x72\xdd\xca\x2e\x85\x73\xe4\x05\x13\x44\x99\x97\x44\x46\xbe\x39\xac\x48\x02\xf9\xf0\x59\xe8\xdd\xdc\x8d\xc3\x61\xe8\x99\x73\xd1\x8a\x86\xad\xe3\xe4\x19\x95\x11\x0e\x38\xcc\x9c\x59\xad\xa0\x49\xd1\x83\xaf\xa8\x43\xbb\x79\xb8\xe7\x3f\xca\x3c\xfb\xe8\x24\xce\x7d\x16\x3d\x7d\x0f\x1e\xcd\x54\x2e\xa4\x0d\xf7\xf3\x1a\x63\x83\x0b\xe5\xb6\x7b\x6e\xbb\x81\xfa\x80\xb8\x46\x5f\x76\x5e\x91\xb9\x9d\xdf\x76\x41\x5b\x0d\x4f\x9e\x31\xde\x06\xb9\x59\x5c\x3f\xc5\x0e\x4c\x02\xe5\x58\xd6\xc5\xfa\x6b\x5f\x18\x1f\x98\x2a\x29\xd4\x3c\x50\xf9\x1a\xc8\xfb\xec\x0d\x02\x2a\xde\xe6\xff\x4d\x03\xc9\xb1\x6d\xbd\xbe\x58\xfb\x68\x3c\xae\xd4\xaa\xf4\x20\x72\x52\xd9\xb2\x10\xec\x61\xa2\x30\x5d\xa4\xb0\x4d\x73\x43\x1a\xab\xd5\x42\xa0\x14\x0b\x99\xb6\xba\xb7\xbc\x3c\x46\x7e\x17\x2a\xb4\x56\x7a\x69\x5f\x1f\x08\x03\x8f\x23\x15\xca\x8f\xc8\x71\x12\x8e\x74\x0a\xff\x05\x00\x00\xff\xff\x7e\xae\x79\x02\x68\x06\x00\x00")

func kmsinitTxtBytes() ([]byte, error) {
	return bindataRead(
		_kmsinitTxt,
		"kmsinit.txt",
	)
}

func kmsinitTxt() (*asset, error) {
	bytes, err := kmsinitTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kmsinit.txt", size: 1640, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0xa0, 0x6f, 0x81, 0x72, 0xb4, 0x30, 0x47, 0x4c, 0xf1, 0xe3, 0x79, 0xe2, 0xc0, 0x89, 0xe7, 0xce, 0xa5, 0x24, 0x89, 0xdd, 0x30, 0xd1, 0x3c, 0x38, 0x84, 0xbf, 0x7a, 0x25, 0xfb, 0x74, 0xb8}}
	return a, nil
}

var _usageTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x4f\x8b\x13\x4f\x10\x3d\xff\xe6\x53\x3c\x72\xda\x85\x4c\x08\x3f\xd0\x83\xb7\x18\x44\x44\x23\x48\x04\xf1\x24\x95\x9e\x9a\x99\x22\x3d\xdd\x43\x55\x75\xdc\xfe\xf6\x32\x63\x64\xd7\x8b\xb7\x82\xf7\xa8\xf7\xef\xad\x58\x28\xe2\x18\x39\xce\x86\x9a\x0b\x8a\x31\x0e\xdf\xce\xf8\x78\x3a\xc3\x33\x26\x4a\x34\x30\x24\xf5\x4a\xe6\x5a\x82\x17\x65\x18\x07\x65\xb7\x5d\xd3\xfc\x79\x50\x8c\x0d\xe6\x94\x3a\xd2\x0e\x56\xa7\x89\x5d\x25\x20\x68\x9d\x3d\x83\xe2\x90\x55\x7c\x9c\x0c\x0f\x9f\xe9\x18\xef\x1f\x2e\xf9\x09\x59\x9b\xc3\xbb\x73\xfb\xfe\x78\x6a\xff\x7f\xf5\xfa\x11\x94\x3a\xf0\x3c\xf2\xc4\x4a\x11\x1d\x39\xe1\xca\xd5\x30\x6b\xbe\x49\xc7\x1d\x2e\x75\x35\xf7\x50\x4c\xd2\x80\xcd\x95\x6b\xf3\x53\x69\x9e\x25\x0d\x1b\x64\xc5\x86\xd3\x8d\x63\x9e\x19\x9c\x56\x79\xc9\x69\xf3\xb8\xc3\xd7\x91\x11\x64\x1e\x59\x9d\x9f\xdc\x40\x4b\x10\xcf\xca\x1d\x24\x81\x9a\xef\x87\xd3\x27\xf4\x12\x19\x3e\x92\x43\x0c\x46\x3d\x2f\x25\x74\x62\xae\x72\x29\xbe\x14\x01\xcb\x45\x03\x23\xe4\xe4\x9a\xe3\x16\x1d\xcf\x31\xd7\x89\x93\xdb\xb6\x39\x7e\x80\x55\x73\x9e\x6c\x0b\xf6\xf0\xa2\xa1\xbb\x7f\xc3\x9a\xa7\xbd\x51\x2c\x77\x7d\x48\x72\xd6\x9e\x02\xe3\x61\x2e\xbe\x36\x30\xb0\x3f\x6e\xd7\xcb\x73\x8e\x4b\xd0\x3e\x6b\x33\x28\xa5\xdf\xf8\x9c\xa3\x84\x7a\x9f\x67\xd1\x06\x05\xcd\x66\xeb\x76\xca\x83\xe4\xb4\xcc\xf3\xa5\x48\xb8\x9a\x93\xfa\x9b\xa6\xf9\xef\x72\xb7\x72\x9d\x6c\x11\x68\x03\xc5\xc8\xda\x4a\xc7\xc9\xc5\xeb\xdf\x04\x49\xe2\x68\xfb\x65\x54\x1b\x77\x75\x8a\xcf\xf0\x62\xf2\x25\x82\x48\x25\x85\xf1\x47\xc8\x4b\xbe\xfd\x7e\xbf\x7f\xe6\x0e\xfc\x0f\x6e\xf3\x2b\x00\x00\xff\xff\x69\x1d\x49\x1d\x80\x02\x00\x00")

func usageTxtBytes() ([]byte, error) {
	return bindataRead(
		_usageTxt,
		"usage.txt",
	)
}

func usageTxt() (*asset, error) {
	bytes, err := usageTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "usage.txt", size: 640, mode: os.FileMode(0644), modTime: time.Unix(1629122283, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0xc7, 0xd1, 0x6c, 0x14, 0x5, 0x66, 0x94, 0x45, 0xda, 0x30, 0xa6, 0x38, 0xe2, 0xde, 0x4, 0xef, 0x2a, 0xec, 0xe7, 0xac, 0xc, 0x86, 0xe2, 0xbc, 0x6c, 0x9, 0xde, 0xbd, 0xe7, 0x7a, 0x1c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"awskms-key.template":  awskmsKeyTemplate,
	"kmseditkeypolicy.txt": kmseditkeypolicyTxt,
	"kmsgrantcreate.txt":   kmsgrantcreateTxt,
	"kmsgrantslist.txt":    kmsgrantslistTxt,
	"kmsgrantsretire.txt":  kmsgrantsretireTxt,
	"kmsinit.txt":          kmsinitTxt,
	"usage.txt":            usageTxt,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"awskms-key.template":  {awskmsKeyTemplate, map[string]*bintree{}},
	"kmseditkeypolicy.txt": {kmseditkeypolicyTxt, map[string]*bintree{}},
	"kmsgrantcreate.txt":   {kmsgrantcreateTxt, map[string]*bintree{}},
	"kmsgrantslist.txt":    {kmsgrantslistTxt, map[string]*bintree{}},
	"kmsgrantsretire.txt":  {kmsgrantsretireTxt, map[string]*bintree{}},
	"kmsinit.txt":          {kmsinitTxt, map[string]*bintree{}},
	"usage.txt":            {usageTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
